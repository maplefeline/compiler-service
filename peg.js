/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Grammar: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(spacing, definition, endoffile) {
            return {
              'type': 'Grammar',
              'children': [spacing].concat(definition.concat([endoffile])),
              'offset': location().start.offset
            }
          },
        function(identifier, leftarrow, expression) {
            return {
              'type': 'Definition',
              'children': [identifier, leftarrow, expression],
              'offset': location().start.offset
            }
          },
        function(sequence, slash, seq) {
                return [slash, seq]
              },
        function(sequence, sequences) {
            return {
              'type': 'Expression',
              'children': [sequence].concat([].concat.apply([], sequences)),
              'offset': location().start.offset
            }
          },
        function(prefix) {
            return {
              'type': 'Sequence',
              'children': prefix,
              'offset': location().start.offset
            }
          },
        function(prefix, suffix) {
            return {
              'type': 'Prefix',
              'children': prefix ? [prefix, suffix] : [suffix],
              'offset': location().start.offset
            }
          },
        function(primary, suffix) {
            return {
              'type': 'Suffix',
              'children': suffix ? [primary, suffix] : [primary],
              'offset': location().start.offset
            }
          },
        function(identifier) {
            return {
              'type': 'Primary',
              'children': [identifier],
              'offset': location().start.offset
            }
          },
        function(open, expression, close) {
            return {
              'type': 'Primary',
              'children': [open, expression, close],
              'offset': location().start.offset
            }
          },
        function(literal) {
            return {
              'type': 'Primary',
              'children': [literal],
              'offset': location().start.offset
            }
          },
        function(cls) {
            return {
              'type': 'Primary',
              'children': [cls],
              'offset': location().start.offset
            }
          },
        function(dot) {
            return {
              'type': 'Primary',
              'children': [dot],
              'offset': location().start.offset
            }
          },
        function(identstart, identcont, spacing) {
            return {
              'type': 'Identifier',
              'children': [identstart].concat(identcont.concat([spacing])),
              'offset': location().start.offset
            }
          },
        /^[a-z_]/i,
        peg$classExpectation([["a", "z"], "_"], false, true),
        function() {
            return {
              'type': 'IdentStart',
              'children': [text()],
              'offset': location().start.offset
            }
          },
        function(identstart) {
            return {
              'type': 'IdentCont',
              'children': [identstart],
              'offset': location().start.offset
            }
          },
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        function() {
            return {
              'type': 'IdentCont',
              'children': [text()],
              'offset': location().start.offset
            }
          },
        /^[']/,
        peg$classExpectation(["'"], false, false),
        function(open, char) {
                return char
              },
        function(open, chars, close, spacing) {
            return {
              'type': 'Literal',
              'children': [open].concat(chars.concat([close, spacing])),
              'offset': location().start.offset
            }
          },
        /^["]/,
        peg$classExpectation(["\""], false, false),
        function(open) {
                return char
              },
        function(open, char, close, spacing) {
            return {
              'type': 'Literal',
              'children': [open].concat(chars.concat([close, spacing])),
              'offset': location().start.offset
            }
          },
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        function(open, range) {
                return range
              },
        function(open, ranges, close, spacing) {
            return {
              'type': 'Class',
              'children': [open].concat(ranges.concat([close, spacing])),
              'offset': location().start.offset
            }
          },
        "-",
        peg$literalExpectation("-", false),
        function(start, sep, end) {
            return {
              'type': 'Range',
              'children': [start, sep, end],
              'offset': location().start.offset
            }
          },
        function(char) {
            return {
              'type': 'Range',
              'children': [char],
              'offset': location().start.offset
            }
          },
        "\\",
        peg$literalExpectation("\\", false),
        /^[nrt'"[\]\\]/,
        peg$classExpectation(["n", "r", "t", "'", "\"", "[", "]", "\\"], false, false),
        function() {
            return {
              'type': 'Char',
              'children': [text()],
              'offset': location().start.offset
            }
          },
        /^[0-2]/,
        peg$classExpectation([["0", "2"]], false, false),
        /^[0-7]/,
        peg$classExpectation([["0", "7"]], false, false),
        peg$anyExpectation(),
        "<-",
        peg$literalExpectation("<-", false),
        function(leftarrow, spacing) {
            return {
              'type': 'LEFTARROW',
              'children': [leftarrow, spacing],
              'offset': location().start.offset
            }
          },
        "/",
        peg$literalExpectation("/", false),
        function(slash, spacing) {
            return {
              'type': 'SLASH',
              'children': [slash, spacing],
              'offset': location().start.offset
            }
          },
        "&",
        peg$literalExpectation("&", false),
        function(and, spacing) {
            return {
              'type': 'AND',
              'children': [and, spacing],
              'offset': location().start.offset
            }
          },
        "!",
        peg$literalExpectation("!", false),
        function(not, spacing) {
            return {
              'type': 'NOT',
              'children': [not, spacing],
              'offset': location().start.offset
            }
          },
        "?",
        peg$literalExpectation("?", false),
        function(question, spacing) {
            return {
              'type': 'QUESTION',
              'children': [question, spacing],
              'offset': location().start.offset
            }
          },
        "*",
        peg$literalExpectation("*", false),
        function(star, spacing) {
            return {
              'type': 'STAR',
              'children': [star, spacing],
              'offset': location().start.offset
            }
          },
        "+",
        peg$literalExpectation("+", false),
        function(plus, spacing) {
            return {
              'type': 'PLUS',
              'children': [plus, spacing],
              'offset': location().start.offset
            }
          },
        "(",
        peg$literalExpectation("(", false),
        function(open, spacing) {
            return {
              'type': 'OPEN',
              'children': [open, spacing],
              'offset': location().start.offset
            }
          },
        ")",
        peg$literalExpectation(")", false),
        function(close, spacing) {
            return {
              'type': 'CLOSE',
              'children': [close, spacing],
              'offset': location().start.offset
            }
          },
        ".",
        peg$literalExpectation(".", false),
        function(dot, spacing) {
            return {
              'type': 'DOT',
              'children': [dot, spacing],
              'offset': location().start.offset
            }
          },
        function(spacing) {
            return {
              'type': 'Spacing',
              'children': spacing,
              'offset': location().start.offset
            }
          },
        "#",
        peg$literalExpectation("#", false),
        function(open, dot) {
                return dot
              },
        function(open, content, endofline) {
            return {
              'type': 'Comment',
              'children': [open].concat(content.concat([endofline])),
              'offset': location().start.offset
            }
          },
        " ",
        peg$literalExpectation(" ", false),
        function() {
            return {
              'type': 'Space',
              'children': [text()],
              'offset': location().start.offset
            }
          },
        "\t",
        peg$literalExpectation("\t", false),
        function(endofline) {
            return {
              'type': 'Space',
              'children': [endofline],
              'offset': location().start.offset
            }
          },
        "\r\n",
        peg$literalExpectation("\r\n", false),
        function() {
            return {
              'type': 'EndOfLine',
              'children': [text()],
              'offset': location().start.offset
            }
          },
        "\n",
        peg$literalExpectation("\n", false),
        "\r",
        peg$literalExpectation("\r", false),
        function() {
            return {
              'type': 'EndOfFile',
              'children': [],
              'offset': location().start.offset
            }
          }
      ],

      peg$bytecode = [
        peg$decode("%;8/I#$;!/&#0#*;!&&&#/3$;</*$8#: ##\"! )(#'#(\"'#&'#"),
        peg$decode("%;'/<#;./3$;\"/*$8#:!##\"! )(#'#(\"'#&'#"),
        peg$decode("%;#/m#$%;//3#;#/*$8\":\"\"#$! )(\"'#&'#0=*%;//3#;#/*$8\":\"\"#$! )(\"'#&'#&/)$8\":#\"\"! )(\"'#&'#"),
        peg$decode("%$;$0#*;$&/' 8!:$!! )"),
        peg$decode("%;0.# &;1.\" &\"/2#;%/)$8\":%\"\"! )(\"'#&'#"),
        peg$decode("%;&/C#;2.) &;3.# &;4.\" &\"/)$8\":&\"\"! )(\"'#&'#"),
        peg$decode("%;'/=#%<;.=.##&&!&'#/($8\":'\"!!)(\"'#&'#.| &%;5/<#;\"/3$;6/*$8#:(##\"! )(#'#(\"'#&'#.S &%;*/' 8!:)!! ).A &%;+/' 8!:*!! )./ &%;7/' 8!:+!! )"),
        peg$decode("%;(/C#$;)0#*;)&/3$;8/*$8#:,##\"! )(#'#(\"'#&'#"),
        peg$decode("%4-\"\"5!7./& 8!:/! )"),
        peg$decode("%;(/' 8!:0!! ).4 &%41\"\"5!72/& 8!:3! )"),
        peg$decode("%44\"\"5!75/\xA9#$%%<44\"\"5!75=.##&&!&'#/2#;-/)$8\":6\"\"$ )(\"'#&'#0N*%%<44\"\"5!75=.##&&!&'#/2#;-/)$8\":6\"\"$ )(\"'#&'#&/C$44\"\"5!75/4$;8/+$8$:7$$#\"! )($'#(#'#(\"'#&'#.\xB7 &%48\"\"5!79/\xA7#$%%<48\"\"5!79=.##&&!&'#/1#;-/($8\"::\"!$)(\"'#&'#0M*%%<48\"\"5!79=.##&&!&'#/1#;-/($8\"::\"!$)(\"'#&'#&/C$48\"\"5!79/4$;8/+$8$:;$$#\"! )($'#(#'#(\"'#&'#"),
        peg$decode("%2<\"\"6<7=/\xA9#$%%<2>\"\"6>7?=.##&&!&'#/2#;,/)$8\":@\"\"$ )(\"'#&'#0N*%%<2>\"\"6>7?=.##&&!&'#/2#;,/)$8\":@\"\"$ )(\"'#&'#&/C$2>\"\"6>7?/4$;8/+$8$:A$$#\"! )($'#(#'#(\"'#&'#"),
        peg$decode("%;-/B#2B\"\"6B7C/3$;-/*$8#:D##\"! )(#'#(\"'#&'#./ &%;-/' 8!:E!! )"),
        peg$decode("%2F\"\"6F7G/6#4H\"\"5!7I/'$8\":J\" )(\"'#&'#.\xD5 &%2F\"\"6F7G/T#4K\"\"5!7L/E$4M\"\"5!7N/6$4M\"\"5!7N/'$8$:J$ )($'#(#'#(\"'#&'#.\x8E &%2F\"\"6F7G/J#4M\"\"5!7N/;$4M\"\"5!7N.\" &\"/'$8#:J# )(#'#(\"'#&'#.Q &%%<2F\"\"6F7G=.##&&!&'#/5#1\"\"5!7O/'$8\":J\" )(\"'#&'#"),
        peg$decode("%2P\"\"6P7Q/2#;8/)$8\":R\"\"! )(\"'#&'#"),
        peg$decode("%2S\"\"6S7T/2#;8/)$8\":U\"\"! )(\"'#&'#"),
        peg$decode("%2V\"\"6V7W/2#;8/)$8\":X\"\"! )(\"'#&'#"),
        peg$decode("%2Y\"\"6Y7Z/2#;8/)$8\":[\"\"! )(\"'#&'#"),
        peg$decode("%2\\\"\"6\\7]/2#;8/)$8\":^\"\"! )(\"'#&'#"),
        peg$decode("%2_\"\"6_7`/2#;8/)$8\":a\"\"! )(\"'#&'#"),
        peg$decode("%2b\"\"6b7c/2#;8/)$8\":d\"\"! )(\"'#&'#"),
        peg$decode("%2e\"\"6e7f/2#;8/)$8\":g\"\"! )(\"'#&'#"),
        peg$decode("%2h\"\"6h7i/2#;8/)$8\":j\"\"! )(\"'#&'#"),
        peg$decode("%2k\"\"6k7l/2#;8/)$8\":m\"\"! )(\"'#&'#"),
        peg$decode("%$;:.# &;90)*;:.# &;9&/' 8!:n!! )"),
        peg$decode("%2o\"\"6o7p/\x97#$%%<;;=.##&&!&'#/7#1\"\"5!7O/)$8\":q\"\"$ )(\"'#&'#0M*%%<;;=.##&&!&'#/7#1\"\"5!7O/)$8\":q\"\"$ )(\"'#&'#&/3$;;/*$8#:r##\"! )(#'#(\"'#&'#"),
        peg$decode("%2s\"\"6s7t/& 8!:u! ).F &%2v\"\"6v7w/& 8!:u! )./ &%;;/' 8!:x!! )"),
        peg$decode("%2y\"\"6y7z/& 8!:{! ).K &%2|\"\"6|7}/& 8!:{! ).4 &%2~\"\"6~7\x7F/& 8!:{! )"),
        peg$decode("%%<1\"\"5!7O=.##&&!&'#/& 8!:\x80! )")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$resultsCache = {},

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    var key    = peg$currPos * 29 + index,
        cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

    return stack[0];
  }

  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
